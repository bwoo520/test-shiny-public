[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "quarto-website-test",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites.\n#run first time setting up directory\n#pip install shinylive --upgrade\n#quarto add quarto-ext/shinylive\n#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n\nfrom pathlib import Path\nimport pandas as pd\n# issue with installing polars within the shinylive environment\n\nfrom shiny import reactive\nfrom shiny.express import input, render, ui\n\n#pip install shinylive --upgrade\n\nwith ui.navset_card_pill(id=\"tab\"):  \n\n    with ui.nav_panel(\"Data frame\"):\n        @render.data_frame\n        def frame():\n            return dat()\n\n    with ui.nav_panel(\"Table\"):\n        @render.table\n        def table():\n            return dat()\n                \n\nwith ui.sidebar(title=\"Filters\"):\n    ui.input_slider(\n        \"mpg\",\n        \"MPG\",\n        min=0,\n        max=40,\n        value=[0, 40]\n    )\n\n\n@reactive.calc\ndef df():\n    return pd.read_csv(\"mtcars.csv\")\n\n@reactive.effect\ndef _():\n    df = df()\n    min_mpg = df[\"mpg\"].min()\n    max_mpg = df[\"mpg\"].max()\n    ui.update_slider(\"mpg\", min=min_mpg, max=max_mpg, value=[min_mpg, max_mpg])\n\n\n@reactive.calc\ndef dat():\n    df = df()\n    return df[(df[\"mpg\"] &gt;= input.mpg()[0]) & (df[\"mpg\"] &lt;= input.mpg()[1])]"
  },
  {
    "objectID": "quarto-app.html",
    "href": "quarto-app.html",
    "title": "Shinylive in Quarto example",
    "section": "",
    "text": "Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org.\n# required when running the first time\n# pip install shinylive --upgrade\n# shinylive assets remove\n# quarto add quarto-ext/shinylive\n\nimport micropip\nawait micropip.install(\"polars\")\n## file: \"mtcars.csv\"\n#| echo: false\n\n\"mpg\",\"cyl\",\"disp\",\"hp\",\"drat\",\"wt\",\"qsec\",\"vs\",\"am\",\"gear\",\"carb\"\n21,6,160,110,3.9,2.62,16.46,0,1,4,4\n21,6,160,110,3.9,2.875,17.02,0,1,4,4\n22.8,4,108,93,3.85,2.32,18.61,1,1,4,1\n21.4,6,258,110,3.08,3.215,19.44,1,0,3,1\n18.7,8,360,175,3.15,3.44,17.02,0,0,3,2\n18.1,6,225,105,2.76,3.46,20.22,1,0,3,1\n14.3,8,360,245,3.21,3.57,15.84,0,0,3,4\n24.4,4,146.7,62,3.69,3.19,20,1,0,4,2\n22.8,4,140.8,95,3.92,3.15,22.9,1,0,4,2\n19.2,6,167.6,123,3.92,3.44,18.3,1,0,4,4\n17.8,6,167.6,123,3.92,3.44,18.9,1,0,4,4\n16.4,8,275.8,180,3.07,4.07,17.4,0,0,3,3\n17.3,8,275.8,180,3.07,3.73,17.6,0,0,3,3\n15.2,8,275.8,180,3.07,3.78,18,0,0,3,3\n10.4,8,472,205,2.93,5.25,17.98,0,0,3,4\n10.4,8,460,215,3,5.424,17.82,0,0,3,4\n14.7,8,440,230,3.23,5.345,17.42,0,0,3,4\n32.4,4,78.7,66,4.08,2.2,19.47,1,1,4,1\n30.4,4,75.7,52,4.93,1.615,18.52,1,1,4,2\n33.9,4,71.1,65,4.22,1.835,19.9,1,1,4,1\n21.5,4,120.1,97,3.7,2.465,20.01,1,0,3,1\n15.5,8,318,150,2.76,3.52,16.87,0,0,3,2\n15.2,8,304,150,3.15,3.435,17.3,0,0,3,2\n13.3,8,350,245,3.73,3.84,15.41,0,0,3,4\n19.2,8,400,175,3.08,3.845,17.05,0,0,3,2\n27.3,4,79,66,4.08,1.935,18.9,1,1,4,1\n26,4,120.3,91,4.43,2.14,16.7,0,1,5,2\n30.4,4,95.1,113,3.77,1.513,16.9,1,1,5,2\n15.8,8,351,264,4.22,3.17,14.5,0,1,5,4\n19.7,6,145,175,3.62,2.77,15.5,0,1,5,6\n15,8,301,335,3.54,3.57,14.6,0,1,5,8\n21.4,4,121,109,4.11,2.78,18.6,1,1,4,2\n\n#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n\nfrom pathlib import Path\n# import polars as pl\nimport pandas as pd\n\nfrom shiny import reactive\nfrom shiny.express import input, render, ui\n\nappdir = Path(__file__).parent\ndf = pd.read_csv(appdir / \"mtcars.csv\")\nasync def download_csv():\n    file_url = dirname(dirname(get_current_url(input))) + \"/mtcars.csv\"\n    resp = await fetch_url(file_url)\n    return str(resp)\n\n#pip install shinylive --upgrade\n\nwith ui.navset_card_pill(id=\"tab\"):  \n\n    with ui.nav_panel(\"Data frame\"):\n        @render.data_frame\n        def frame():\n            return dat()\n\n    with ui.nav_panel(\"Table\"):\n        @render.table\n        def table():\n            return dat()\n                \n\nwith ui.sidebar(title=\"Filters\"):\n    ui.input_slider(\n        \"mpg\",\n        \"MPG\",\n        min=df[\"mpg\"].min(),\n        max=df[\"mpg\"].max(),\n        value=[df[\"mpg\"].min(), df[\"mpg\"].max()]\n    )\n\n\n@reactive.calc\ndef dat():\n    return df[(df[\"mpg\"] &gt;= input.mpg()[0]) & (df[\"mpg\"] &lt;= input.mpg()[1])]\n\ndef get_current_url(input: Inputs) -&gt; str:\n    return (\n        input[\".clientdata_url_protocol\"]()\n        + \"//\"\n        + input[\".clientdata_url_hostname\"]()\n        + \":\"\n        + input[\".clientdata_url_port\"]()\n        + input[\".clientdata_url_pathname\"]()\n    )\n\n\nasync def fetch_url(url: str, type: str = \"string\"):\n    import pyodide.http\n\n    response = await pyodide.http.pyfetch(url)\n\n    if type == \"json\":\n        # .json() parses the response as JSON and converts to dictionary.\n        return await response.json()\n    elif type == \"string\":\n        # .string() returns the response as a string.\n        return await response.string()\n    elif type == \"bytes\":\n        # .bytes() returns the response as a byte object.\n        return await response.bytes()\n    else:\n        return None"
  },
  {
    "objectID": "quarto-app.html#quarto",
    "href": "quarto-app.html#quarto",
    "title": "Shinylive in Quarto example",
    "section": "",
    "text": "Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org.\n# required when running the first time\n# pip install shinylive --upgrade\n# shinylive assets remove\n# quarto add quarto-ext/shinylive\n\nimport micropip\nawait micropip.install(\"polars\")\n## file: \"mtcars.csv\"\n#| echo: false\n\n\"mpg\",\"cyl\",\"disp\",\"hp\",\"drat\",\"wt\",\"qsec\",\"vs\",\"am\",\"gear\",\"carb\"\n21,6,160,110,3.9,2.62,16.46,0,1,4,4\n21,6,160,110,3.9,2.875,17.02,0,1,4,4\n22.8,4,108,93,3.85,2.32,18.61,1,1,4,1\n21.4,6,258,110,3.08,3.215,19.44,1,0,3,1\n18.7,8,360,175,3.15,3.44,17.02,0,0,3,2\n18.1,6,225,105,2.76,3.46,20.22,1,0,3,1\n14.3,8,360,245,3.21,3.57,15.84,0,0,3,4\n24.4,4,146.7,62,3.69,3.19,20,1,0,4,2\n22.8,4,140.8,95,3.92,3.15,22.9,1,0,4,2\n19.2,6,167.6,123,3.92,3.44,18.3,1,0,4,4\n17.8,6,167.6,123,3.92,3.44,18.9,1,0,4,4\n16.4,8,275.8,180,3.07,4.07,17.4,0,0,3,3\n17.3,8,275.8,180,3.07,3.73,17.6,0,0,3,3\n15.2,8,275.8,180,3.07,3.78,18,0,0,3,3\n10.4,8,472,205,2.93,5.25,17.98,0,0,3,4\n10.4,8,460,215,3,5.424,17.82,0,0,3,4\n14.7,8,440,230,3.23,5.345,17.42,0,0,3,4\n32.4,4,78.7,66,4.08,2.2,19.47,1,1,4,1\n30.4,4,75.7,52,4.93,1.615,18.52,1,1,4,2\n33.9,4,71.1,65,4.22,1.835,19.9,1,1,4,1\n21.5,4,120.1,97,3.7,2.465,20.01,1,0,3,1\n15.5,8,318,150,2.76,3.52,16.87,0,0,3,2\n15.2,8,304,150,3.15,3.435,17.3,0,0,3,2\n13.3,8,350,245,3.73,3.84,15.41,0,0,3,4\n19.2,8,400,175,3.08,3.845,17.05,0,0,3,2\n27.3,4,79,66,4.08,1.935,18.9,1,1,4,1\n26,4,120.3,91,4.43,2.14,16.7,0,1,5,2\n30.4,4,95.1,113,3.77,1.513,16.9,1,1,5,2\n15.8,8,351,264,4.22,3.17,14.5,0,1,5,4\n19.7,6,145,175,3.62,2.77,15.5,0,1,5,6\n15,8,301,335,3.54,3.57,14.6,0,1,5,8\n21.4,4,121,109,4.11,2.78,18.6,1,1,4,2\n\n#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n\nfrom pathlib import Path\n# import polars as pl\nimport pandas as pd\n\nfrom shiny import reactive\nfrom shiny.express import input, render, ui\n\nappdir = Path(__file__).parent\ndf = pd.read_csv(appdir / \"mtcars.csv\")\nasync def download_csv():\n    file_url = dirname(dirname(get_current_url(input))) + \"/mtcars.csv\"\n    resp = await fetch_url(file_url)\n    return str(resp)\n\n#pip install shinylive --upgrade\n\nwith ui.navset_card_pill(id=\"tab\"):  \n\n    with ui.nav_panel(\"Data frame\"):\n        @render.data_frame\n        def frame():\n            return dat()\n\n    with ui.nav_panel(\"Table\"):\n        @render.table\n        def table():\n            return dat()\n                \n\nwith ui.sidebar(title=\"Filters\"):\n    ui.input_slider(\n        \"mpg\",\n        \"MPG\",\n        min=df[\"mpg\"].min(),\n        max=df[\"mpg\"].max(),\n        value=[df[\"mpg\"].min(), df[\"mpg\"].max()]\n    )\n\n\n@reactive.calc\ndef dat():\n    return df[(df[\"mpg\"] &gt;= input.mpg()[0]) & (df[\"mpg\"] &lt;= input.mpg()[1])]\n\ndef get_current_url(input: Inputs) -&gt; str:\n    return (\n        input[\".clientdata_url_protocol\"]()\n        + \"//\"\n        + input[\".clientdata_url_hostname\"]()\n        + \":\"\n        + input[\".clientdata_url_port\"]()\n        + input[\".clientdata_url_pathname\"]()\n    )\n\n\nasync def fetch_url(url: str, type: str = \"string\"):\n    import pyodide.http\n\n    response = await pyodide.http.pyfetch(url)\n\n    if type == \"json\":\n        # .json() parses the response as JSON and converts to dictionary.\n        return await response.json()\n    elif type == \"string\":\n        # .string() returns the response as a string.\n        return await response.string()\n    elif type == \"bytes\":\n        # .bytes() returns the response as a byte object.\n        return await response.bytes()\n    else:\n        return None"
  }
]